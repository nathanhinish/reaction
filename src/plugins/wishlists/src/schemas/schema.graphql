enum WishlistEntryPriority {
  HIGHEST
  HIGH
  MEDIUM
  LOW
  LOWEST
}

type WishlistEntry implements Node {
  _id: ID!
  wishlist: Wishlist
  product: Product
  variant: CatalogProductVariant
  comment: String
  priority: WishlistEntryPriority
  quantityDesired: Int
  quantityReceived: Int
  createdAt: DateTime!
  updatedAt: DateTime
  isArchived: Boolean!
}

type Wishlist implements Node {
  _id: ID!
  entries: [WishlistEntry]!
  account: Account
  name: String
  permalink: String
  description: String
  isVisible: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  isArchived: Boolean!
}

type WishlistConfiguration {
  wishlistId: ID!
}

enum WishlistSortByField {
  _id
  createdAt
  name
  updatedAt
}

type WishlistEdge {
  cursor: ConnectionCursor!
  node: Wishlist
}

type WishlistConnection {
  edges: [WishlistEdge]
  nodes: [Wishlist]
  pageInfo: PageInfo!
  totalCount: Int!
}

input ArchiveWishlistsInput {
  wishlistIds: [ID]!
}

type ArchiveWishlistsPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Array of newly archived wishlists"
  wishlists: [Wishlist]!
}

input ArchiveWishlistEntriesInput {
  wishlistEntryIds: [ID]!
}

type ArchiveWishlistEntriesPayload {
  clientMutationId: String
  wishlistEntries: [WishlistEntry]!
}

input WishlistInput {
  _id: ID!
  name: String
  permalink: String
  description: String
  isVisible: Boolean!
  isArchived: Boolean!
}

input WishlistEntryInput {
  _id: ID!
  productId: ID
  variantId: ID
  comment: String
  priority: WishlistEntryPriority
  quantityDesired: Int
  quantityReceived: Int
  isArchived: Boolean!
}

input CreateWishlistInput {
  wishlist: WishlistInput
}

type CreateWishlistPayload {
  clientMutationId: String
  wishlist: Wishlist!
}

input CreateWishlistEntryInput {
  wishlistId: ID!
  entry: WishlistEntryInput
}

type CreateWishlistEntryPayload {
  clientMutationId: String
  entry: WishlistEntry!
}

input CloneWishlistsInput {
  wishlistIds: [ID]!
}

type CloneWishlistsPayload {
  clientMutationId: String
  wishlists: [Wishlist]!
}

input CloneWishlistEntriesInput {
  clientMutationId: String
  entryIds: [ID]!
}

type CloneWishlistEntriesPayload {
  clientMutationId: String
  entries: [WishlistEntry]!
}

input UpdateWishlistInput {
  wishlist: WishlistInput!
  wishlistId: ID!
}

type UpdateWishlistPayload {
  clientMutationId: String
  wishlist: Wishlist!
}

input UpdateWishlistEntryInput {
  entry: WishlistEntryInput!
  wishlistId: ID!
  entryId: ID!
}

type UpdateWishlistEntryPayload {
  clientMutationId: String
  entry: WishlistEntry!
}

input UpdateWishlistsVisibilityInput {
  isVisible: Boolean!
  wishlistIds: [ID]!
}

type UpdateWishlistsVisibilityPayload {
  clientMutationId: String
  updatedCount: Int
}



extend type Query {
  wishlist(wishlistId: ID!): Wishlist

  wishlists(
    isArchived: Boolean
    isVisible: Boolean
    wishlistIds: [ID]
    query: String
    after: ConnectionCursor,
    before: ConnectionCursor,
    first: ConnectionLimitInt,
    last: ConnectionLimitInt,
    offset: Int,
    sortOrder: SortOrder = desc,
    sortBy: WishlistSortByField = createdAt
  ): WishlistConnection
}

extend type Mutation {
  archiveWishlists(input: ArchiveWishlistsInput!): ArchiveWishlistsPayload!
  archiveWishlistEntries(input: ArchiveWishlistEntriesInput!): ArchiveWishlistEntriesPayload!
  createWishlist(input: CreateWishlistInput!): CreateWishlistPayload!
  createWishlistEntry(input: CreateWishlistEntryInput!): CreateWishlistEntryPayload!
  cloneWishlists(input: CloneWishlistsInput!): CloneWishlistsPayload!
  cloneWishlistEntries(input: CloneWishlistEntriesInput!): CloneWishlistEntriesPayload!
  updateWishlist(input: UpdateWishlistInput!): UpdateWishlistPayload!
  updateWishlistEntry(input: UpdateWishlistEntryInput!): UpdateWishlistEntryPayload!
  updateWishlistsVisibility(input: UpdateWishlistsVisibilityInput!): UpdateWishlistsVisibilityPayload!
}
